{"version":3,"file":"main.js","mappings":"mBAAA,IAAMA,EAAS,CACXC,QAAS,4CACTC,QAAS,CACLC,cAAe,uCACf,eAAgB,qBAIlBC,EAAgB,SAACC,GACnB,OAAIA,EAAIC,GACGD,EAAIE,OAERC,QAAQC,OAAO,WAADC,OAAYL,EAAIM,QACzC,ECVO,SAASC,EAAWC,EAAUC,EAAkBC,EAAgBC,EAAUC,GAG7E,IAGMC,EAHeC,SAASC,cAAc,kBAAkBC,QAG7BC,WAAU,GAAMF,cAAc,SACzDG,EAAYL,EAAYE,cAAc,gBACtCI,EAAYN,EAAYE,cAAc,gBACtCK,EAAmBP,EAAYE,cAAc,wBAC7CM,EAAiBR,EAAYE,cAAc,sBAC3CO,EAAiBT,EAAYE,cAAc,sBAgCjD,OA9BAG,EAAUK,IAAMf,EAASgB,KACzBN,EAAUO,IAAMjB,EAASkB,KACzBP,EAAUQ,YAAcnB,EAASkB,KACjCJ,EAAeK,YAAcnB,EAASoB,MAAMC,OAGxCrB,EAASsB,MAAMC,MAAQnB,EACvBQ,EAAiBY,SAEjBZ,EAAiBa,iBAAiB,SAAS,WACvCxB,EAAiBD,EAASuB,IAAKlB,EACnC,IAIJK,EAAUe,iBAAiB,SAAS,WAChCvB,EAAeF,EAASgB,KAAMhB,EAASkB,KAC3C,IAGAL,EAAeY,iBAAiB,SAAS,WACrCtB,EAASU,EAAgBb,EAASuB,IAAKT,EAC3C,IAGgBd,EAASoB,MAAMM,MAAK,SAAAC,GAAI,OAAIA,EAAKJ,MAAQnB,CAAM,KAE3DS,EAAee,UAAUC,IAAI,+BAG1BxB,CACX,CAGO,SAASF,EAASU,EAAgBiB,EAAQhB,GACrBD,EAAee,UAAUG,SAAS,+BDqB7B,SAACD,GAC9B,OAAOE,MAAM,GAADnC,OAAIV,EAAOC,QAAO,iBAAAS,OAAgBiC,GAAU,CACpDG,OAAQ,SACR5C,QAASF,EAAOE,UAEnB6C,KAAK3C,EACV,CCzBQ4C,CAAmBL,GAClBI,MAAK,SAAAE,GAEFvB,EAAee,UAAUJ,OAAO,+BAChCV,EAAeK,YAAciB,EAAKhB,MAAMC,MAC5C,IACCgB,OAAM,SAAAC,GACHC,QAAQC,IAAIF,EAChB,IDmBsB,SAACR,GAC3B,OAAOE,MAAM,GAADnC,OAAIV,EAAOC,QAAO,iBAAAS,OAAgBiC,GAAU,CACpDG,OAAQ,MACR5C,QAASF,EAAOE,UAEnB6C,KAAK3C,EACV,CCvBQkD,CAAgBX,GACfI,MAAK,SAAAE,GAEFvB,EAAee,UAAUC,IAAI,+BAC7Bf,EAAeK,YAAciB,EAAKhB,MAAMC,MAC5C,IACCgB,OAAM,SAAAC,GACHC,QAAQC,IAAIF,EAChB,GAER,CCxEO,SAASI,EAAUC,GACtBA,EAAMf,UAAUC,IAAI,mBAGpB,IAAMe,EAAiB,SAACC,GACF,WAAdA,EAAMC,KACNC,EAAWJ,EAEnB,EAEArC,SAASmB,iBAAiB,UAAWmB,GACrCD,EAAMC,eAAiBA,CAC3B,CAGO,SAASG,EAAWJ,GACvBA,EAAMf,UAAUJ,OAAO,mBAGvBlB,SAAS0C,oBAAoB,UAAWL,EAAMC,uBACvCD,EAAMC,cACjB,CCpBA,IAUMK,EAAiB,SAACC,EAAaC,EAAcC,GAC/C,IAAMC,EAAeH,EAAY3C,cAAc,IAADV,OAAKsD,EAAaG,GAAE,WAC9DD,IACAF,EAAavB,UAAUJ,OAAO4B,EAASG,iBACvCF,EAAalC,YAAc,GAC3BkC,EAAazB,UAAUJ,OAAO4B,EAASI,YAE/C,EAwBMC,EAAoB,SAACC,EAAWC,EAAeP,IAP7B,SAACM,GACrB,OAAOA,EAAUhC,MAAK,SAACyB,GACnB,OAAQA,EAAaS,SAASC,KAClC,GACJ,CAIQC,CAAgBJ,IAIhBC,EAAcI,UAAW,EACzBJ,EAAc/B,UAAUJ,OAAO4B,EAASY,uBAJxCL,EAAcI,UAAW,EACzBJ,EAAc/B,UAAUC,IAAIuB,EAASY,qBAK7C,EAyBO,SAASC,EAAgBf,EAAaE,GAEzC,IAAMM,EAAYQ,MAAMC,KAAKjB,EAAYkB,iBAAiBhB,EAASiB,gBAC7DV,EAAgBT,EAAY3C,cAAc6C,EAASkB,sBACzDb,EAAkBC,EAAWC,EAAeP,GAG5CM,EAAUa,SAAQ,SAACpB,GACfF,EAAeC,EAAaC,EAAcC,EAC9C,GACJ,C,sGC/EA,IAAMoB,EAAalE,SAASC,cAAc,iBAGpCkE,EAAYnE,SAASC,cAAc,oBACnCmE,EAAWpE,SAASC,cAAc,wBAClCoE,EAAWrE,SAASC,cAAc,qBAGlCqE,EAAaD,EAASpE,cAAc,iBACpCsE,EAAeF,EAASpE,cAAc,mBAGtCuE,EAAaxE,SAASC,cAAc,yBACpCwE,EAAYzE,SAASC,cAAc,wBA+BzC,SAASL,EAAec,EAAME,GAC1B0D,EAAW7D,IAAMC,EACjB4D,EAAW3D,IAAMC,EACjB2D,EAAa1D,YAAcD,EAC3BwB,EAAUiC,EACd,CA9BAG,EAAWrD,iBAAiB,SAAS,WACjCiB,EAAU+B,GACVO,EAAUC,MAAQC,EAAa/D,YAC/BgE,EAASF,MAAQG,EAAmBjE,YACpC8C,EAAgBoB,EAAUC,EAC9B,IAEAP,EAAUtD,iBAAiB,SAAS,WAChC8D,EAAeC,QACf9C,EAAUgC,GACVT,EAAgBsB,EAAgBD,EACpC,IAIehF,SAAS8D,iBAAiB,UAClCG,SAAQ,SAAC5B,GACZA,EAAMlB,iBAAiB,SAAS,SAAUoB,IAClCA,EAAM4C,OAAO7D,UAAUG,SAAS,iBAAmBc,EAAM4C,SAAW9C,IACxEI,EAAWJ,EAEf,GACJ,IAaA,IAKI+C,EACAC,EANEC,EAAetF,SAASC,cAAc,uBAEtCsF,EADcvF,SAASwF,MAAe,QACNvF,cAAc,kBAOpD,SAASN,EAAiBqD,EAAIjD,GAC1BqF,EAAkBpC,EAClBqC,EAAgBtF,EAChBqC,EAAUkD,EACd,CAwBAC,EAAkBpE,iBAAiB,SArBnC,SAA6BoB,GACzBA,EAAMkD,iBAEN,IAAMC,EAAoBH,EAAkB1E,YAE5C0E,EAAkB1E,YAAc,cJnEP,SAACuE,GAC1B,OAAO1D,MAAM,GAADnC,OAAIV,EAAOC,QAAO,WAAAS,OAAU6F,GAAmB,CACvDzD,OAAQ,SACR5C,QAASF,EAAOE,UAEnB6C,KAAK3C,EACV,CI+DI0G,CAAcP,GACbxD,MAAK,WAEFyD,EAAcnE,SACduB,EAAW6C,EACf,IACCvD,OAAM,SAAAC,GACHC,QAAQC,IAAIF,EAChB,IACC4D,SAAQ,WAETL,EAAkB1E,YAAc6E,CAChC,GACJ,IAQA,IAAMX,EAAW/E,SAASC,cAAc,6BAElCyE,EAAYK,EAAS9E,cAAc,2BACnC4E,EAAWE,EAAS9E,cAAc,kCAElC2E,EAAe5E,SAASC,cAAc,mBACtC6E,EAAqB9E,SAASC,cAAc,yBA2BlD8E,EAAS5D,iBAAkB,UAxB3B,SAAwBoB,GACpBA,EAAMkD,iBAEN,IAAMI,EAAmBd,EAAS9E,cAAc,kBAC1C6F,EAAkBD,EAAiBhF,YAEzCgF,EAAiBhF,YAAc,gBJjGR,SAAC+D,EAAcE,GACtC,OAAOpD,MAAM,GAADnC,OAAIV,EAAOC,QAAO,aAAa,CACvC6C,OAAQ,QACR5C,QAASF,EAAOE,QAChBgH,KAAMC,KAAKC,UAAU,CACjBrF,KAAMgE,EACNsB,MAAOpB,MAGdlD,KAAK3C,EACV,CIyFIkH,CAAazB,EAAUC,MAAOE,EAASF,OACtC/C,MAAK,WAEFgD,EAAa/D,YAAc6D,EAAUC,MACrCG,EAAmBjE,YAAcgE,EAASF,MAE1ClC,EAAW0B,EACf,IACCpC,OAAM,SAACC,GACJC,QAAQC,IAAIF,EAChB,IACC4D,SAAQ,WAETC,EAAiBhF,YAAciF,CAC/B,GACJ,IAQA,IAAMb,EAAiBjF,SAASC,cAAc,0BAgC9CgF,EAAe9D,iBAAkB,UA9BjC,SAAuBoB,GACnBA,EAAMkD,iBAEN,IJnHuBW,EAAUC,EImH3B3G,EAAW,CACbkB,KAAMqE,EAAehF,cAAc,gCAAgC0E,MACnEjE,KAAMuE,EAAehF,cAAc,0BAA0B0E,OAE3D2B,EAAsBrB,EAAehF,cAAc,kBACnDsG,EAAqBD,EAAoBzF,YAE/CyF,EAAoBzF,YAAc,iBJ1HXuF,EI4HX1G,EAASkB,KJ5HYyF,EI4HN3G,EAASgB,KJ3H7BgB,MAAM,GAADnC,OAAIV,EAAOC,QAAO,UAAU,CACpC6C,OAAQ,OACR5C,QAASF,EAAOE,QAChBgH,KAAMC,KAAKC,UAAU,CACjBrF,KAAMwF,EACN1F,KAAM2F,MAGbzE,KAAK3C,IIoHL2C,MAAK,SAAA4E,GAEF,IAAMC,EAAUhH,EAAW+G,EAAS7G,EAAkBC,EAAgBC,EAAUC,GAEhFoE,EAAWwC,QAAQD,GAEnBhE,EAAW2B,GACXa,EAAeC,OACnB,IACCnD,OAAM,SAACC,GACJC,QAAQC,IAAIF,EAChB,IACC4D,SAAQ,WAETU,EAAoBzF,YAAc0F,CAClC,GACJ,IAOA,IDrHiCzD,ECqH3BkC,EAAqB,CACvB2B,aAAc,eACd5C,cAAe,gBACfC,qBAAsB,iBACtBN,oBAAqB,yBACrBT,gBAAiB,0BACjBC,WAAY,6BD3HiBJ,EC8HhBkC,ED7HIpB,MAAMC,KAAK7D,SAAS8D,iBAAiBhB,EAAS6D,eACtD1C,SAAQ,SAACrB,IAdI,SAACA,EAAaE,GACpC,IAAMM,EAAYQ,MAAMC,KAAKjB,EAAYkB,iBAAiBhB,EAASiB,gBAC7DV,EAAgBT,EAAY3C,cAAc6C,EAASkB,sBACzDZ,EAAUa,SAAQ,SAACpB,GACfA,EAAa1B,iBAAiB,SAAS,YApC/B,SAACyB,EAAaC,EAAcC,GACpCD,EAAaS,SAASsD,gBACtB/D,EAAagE,kBAAkBhE,EAAaiE,QAAQC,cAEpDlE,EAAagE,kBAAkB,IAE9BhE,EAAaS,SAASC,MAGvBZ,EAAeC,EAAaC,EAAcC,GA7B3B,SAACF,EAAaC,EAAckE,EAAcjE,GAC7D,IAAMC,EAAeH,EAAY3C,cAAc,IAADV,OAAKsD,EAAaG,GAAE,WAC9DD,IACAF,EAAavB,UAAUC,IAAIuB,EAASG,iBACpCF,EAAalC,YAAckG,EAC3BhE,EAAazB,UAAUC,IAAIuB,EAASI,YAE5C,CAoBQ8D,CAAepE,EAAaC,EAAcA,EAAaoE,kBAAmBnE,EAIlF,CA0BYoE,CAAQtE,EAAaC,EAAcC,GACnCK,EAAkBC,EAAWC,EAAeP,EAChD,GACJ,GACJ,CAMQqE,CAAkBvE,EAAaE,EACnC,ICgIJ,IAAIhD,EAAS,KAEbT,QAAQ+H,IAAI,CJxJD1F,MAAM,GAADnC,OAAIV,EAAOC,QAAO,aAAa,CACvCC,QAASF,EAAOE,UAEnB6C,KAAK3C,GAICyC,MAAM,GAADnC,OAAIV,EAAOC,QAAO,UAAU,CACpCC,QAASF,EAAOE,UAEnB6C,KAAK3C,KI+IL2C,MAAK,SAAAyF,GAAuB,I,IAAAC,G,EAAA,E,4CAAAD,I,s1BAArBE,EAAQD,EAAA,GAAEE,EAAKF,EAAA,GACnBxH,EAASyH,EAAStG,IAClB2D,EAAa/D,YAAc0G,EAAS3G,KACpCkE,EAAmBjE,YAAc0G,EAASrB,MAC1CuB,EAAchH,IAAM8G,EAASG,OAC7BF,EAAMvD,SAAQ,SAACvE,GACX,IAAMK,EAAcN,EAChBC,EACAC,EACAC,EACAC,EACAC,GAEJoE,EAAWyD,OAAO5H,EACtB,GACJ,IACCgC,OAAM,SAACC,GACJC,QAAQC,IAAIF,EAChB,IAQJ,IAAM4F,EAAa5H,SAASC,cAAc,wBACpC4H,EAAc7H,SAASC,cAAc,uBACrC6H,EAAiBD,EAAY5H,cAAc,gBAC3C8H,EAAkBD,EAAe7H,cAAc,4BAC/CwH,EAAgBzH,SAASC,cAAc,mBA0B7C6H,EAAe3G,iBAAkB,UAvBjC,SAA0BoB,GACtBA,EAAMkD,iBAEN,IJhL0BuC,EIgLpBC,EAAkBH,EAAe7H,cAAc,kBAC/CiI,EAAiBD,EAAgBpH,YAEvCoH,EAAgBpH,YAAc,iBJnLJmH,EIsLXD,EAAgBpD,MJrLxBjD,MAAM,GAADnC,OAAIV,EAAOC,QAAO,oBAAoB,CAC9C6C,OAAQ,QACR5C,QAASF,EAAOE,QAChBgH,KAAMC,KAAKC,UAAU,CACjByB,OAAQM,MAGfpG,KAAK3C,II+KL2C,MAAK,SAAAE,GAEF2F,EAAchH,IAAMqB,EAAK4F,OACzBjF,EAAWoF,EACf,IACC9F,OAAM,SAACC,GACJC,QAAQC,IAAIF,EAChB,IACC4D,SAAQ,WAETqC,EAAgBpH,YAAcqH,CAC9B,GACJ,IAMAN,EAAWzG,iBAAiB,SAAS,WACjCiB,EAAUyF,GACVE,EAAgBpD,MAAQ8C,EAAc5G,YACtC8C,EAAgBmE,EAAgB9C,EACpC,G","sources":["webpack://mesto-project-ff/./src/components/api.js","webpack://mesto-project-ff/./src/components/card.js","webpack://mesto-project-ff/./src/components/modal.js","webpack://mesto-project-ff/./src/components/validation.js","webpack://mesto-project-ff/./src/index.js"],"sourcesContent":["const config = {\r\n    baseUrl: 'https://nomoreparties.co/v1/wff-cohort-41',\r\n    headers: {\r\n        authorization: '7bcddfbe-b09d-482c-b0c1-bf3d57a4e0cf',\r\n        'Content-Type': 'application/json'\r\n    }\r\n};\r\n\r\nconst checkResponse = (res) => {\r\n    if (res.ok) {\r\n        return res.json();\r\n    }\r\n    return Promise.reject(`Ошибка: ${res.status}`);\r\n};\r\n\r\nexport const deleteCardApi = (idCardForDelete) => {\r\n    return fetch(`${config.baseUrl}/cards/${idCardForDelete}`, {\r\n        method: 'DELETE',\r\n        headers: config.headers\r\n    })\r\n    .then(checkResponse)\r\n};\r\n\r\nexport const formEditApi = (profileTitle, profileDescription) => {\r\n    return fetch(`${config.baseUrl}/users/me`, {\r\n        method: 'PATCH',\r\n        headers: config.headers,\r\n        body: JSON.stringify({\r\n            name: profileTitle,\r\n            about: profileDescription\r\n        })\r\n    })\r\n    .then(checkResponse)\r\n};\r\n\r\nexport const newCardApi = (cardName, cardLink) => {\r\n    return fetch(`${config.baseUrl}/cards`, {\r\n        method: 'POST',\r\n        headers: config.headers,\r\n        body: JSON.stringify({\r\n            name: cardName,\r\n            link: cardLink\r\n        })\r\n    })\r\n    .then(checkResponse)\r\n};\r\n\r\nexport const getUserData = () => {\r\n    return fetch(`${config.baseUrl}/users/me`, {\r\n        headers: config.headers,\r\n    })\r\n    .then(checkResponse)\r\n};\r\n\r\nexport const getAllCards = () => {\r\n    return fetch(`${config.baseUrl}/cards`, {\r\n        headers: config.headers,\r\n    })\r\n    .then(checkResponse)\r\n};\r\n\r\nexport const editAvatarApi = (avatarLink) => {\r\n    return fetch(`${config.baseUrl}/users/me/avatar`, {\r\n        method: 'PATCH',\r\n        headers: config.headers,\r\n        body: JSON.stringify({\r\n            avatar: avatarLink\r\n        })\r\n    })\r\n    .then(checkResponse)\r\n};\r\n\r\nexport const cardLikeDeleteApi = (cardId) => {\r\n    return fetch(`${config.baseUrl}/cards/likes/${cardId}`, {\r\n        method: 'DELETE',\r\n        headers: config.headers\r\n    })\r\n    .then(checkResponse)\r\n};\r\n\r\nexport const cardLikePutApi = (cardId) => {\r\n    return fetch(`${config.baseUrl}/cards/likes/${cardId}`, {\r\n        method: 'PUT',\r\n        headers: config.headers\r\n    })\r\n    .then(checkResponse)\r\n}","import { cardLikeDeleteApi, cardLikePutApi } from \"./api.js\";\r\n\r\n// @todo: Функция создания карточки\r\nexport function createCard(cardData, handleDeleteCard, handleClickImg, cardLike, userId) {\r\n    \r\n    // @todo: Темплейт карточки\r\n    const cardTemplate = document.querySelector('#card-template').content;\r\n\r\n    // @todo: DOM узлы\r\n    const cardElement = cardTemplate.cloneNode(true).querySelector('.card');\r\n    const cardImage = cardElement.querySelector('.card__image');\r\n    const cardTitle = cardElement.querySelector('.card__title');\r\n    const cardDeleteButton = cardElement.querySelector('.card__delete-button');\r\n    const cardLikeButton = cardElement.querySelector('.card__like-button');\r\n    const cardLikeNumber = cardElement.querySelector('.card__like-number');//создадим переменую количества лайков\r\n    \r\n    cardImage.src = cardData.link;\r\n    cardImage.alt = cardData.name;\r\n    cardTitle.textContent = cardData.name;\r\n    cardLikeNumber.textContent = cardData.likes.length;//присвоим значение длины массива лайков, полученное с сервера\r\n\r\n    // показ или нет кнопки удаления и слушатель кнопки удаления\r\n    if (cardData.owner._id !== userId) {\r\n        cardDeleteButton.remove();\r\n    } else {\r\n        cardDeleteButton.addEventListener('click', () => {\r\n            handleDeleteCard(cardData._id, cardElement);\r\n        });\r\n    };\r\n\r\n    // слушатель разворачивания картинки при клике\r\n    cardImage.addEventListener('click', () => {\r\n        handleClickImg(cardData.link, cardData.name);\r\n    });\r\n\r\n    // слушатель и вызов функции лайка карточки\r\n    cardLikeButton.addEventListener('click', () => {\r\n        cardLike(cardLikeButton, cardData._id, cardLikeNumber);\r\n    });\r\n\r\n    // Проверяем, лайкнул ли текущий пользователь карточку\r\n    const isLiked = cardData.likes.some(like => like._id === userId);\r\n    if (isLiked) {\r\n        cardLikeButton.classList.add('card__like-button_is-active');\r\n    };\r\n\r\n    return cardElement;\r\n};\r\n\r\n// скрипт лайка карточки\r\nexport function cardLike(cardLikeButton, cardId, cardLikeNumber) {\r\n    const cardLikedStatus = cardLikeButton.classList.contains('card__like-button_is-active');\r\n    if (cardLikedStatus) {\r\n        cardLikeDeleteApi (cardId)\r\n        .then(data => {\r\n            // Удаляем класс лайка\r\n            cardLikeButton.classList.remove('card__like-button_is-active');\r\n            cardLikeNumber.textContent = data.likes.length;\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n        })\r\n    } else {\r\n        cardLikePutApi (cardId)\r\n        .then(data => {\r\n            // добавим класс лайка\r\n            cardLikeButton.classList.add('card__like-button_is-active');\r\n            cardLikeNumber.textContent = data.likes.length;\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n        })\r\n    }\r\n};\r\n","// Функция открытия модального окна\r\nexport function openModal(popup) {\r\n    popup.classList.add('popup_is-opened');\r\n    \r\n    //добавим обработчик закрытия окна по кнопке Escape\r\n    const handleCloseEsc = (event) => {\r\n        if (event.key === 'Escape') {\r\n            closeModal(popup);\r\n        }\r\n    };\r\n\r\n    document.addEventListener('keydown', handleCloseEsc);\r\n    popup.handleCloseEsc = handleCloseEsc;\r\n};\r\n\r\n// Функция закрытия модального окна\r\nexport function closeModal(popup) {\r\n    popup.classList.remove('popup_is-opened');\r\n    \r\n    //удалим обработчик закрытия окна\r\n    document.removeEventListener('keydown', popup.handleCloseEsc);\r\n    delete popup.handleCloseEsc;\r\n};\r\n\r\n\r\n","//функции проверки на валидность и вывода и удаления сообщений\r\n//напишем функцию показа сообщения об ошибке\r\nconst showInputError = (formElement, inputElement, errorMessage, settings) => {\r\n    const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n    if (errorElement) {\r\n        inputElement.classList.add(settings.inputErrorClass);\r\n        errorElement.textContent = errorMessage;\r\n        errorElement.classList.add(settings.errorClass);\r\n    }\r\n};\r\n\r\n//Напишем функцию удаления сообщения об ошибке\r\nconst hideInputError = (formElement, inputElement, settings) => {\r\n    const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n    if (errorElement) {\r\n        inputElement.classList.remove(settings.inputErrorClass);\r\n        errorElement.textContent = '';\r\n        errorElement.classList.remove(settings.errorClass);\r\n    }\r\n};\r\n\r\n//напишем функцию проверки полей на валидность\r\nconst isValid = (formElement, inputElement, settings) => {\r\n    if (inputElement.validity.patternMismatch) {\r\n        inputElement.setCustomValidity(inputElement.dataset.errorMessage);\r\n    } else {\r\n        inputElement.setCustomValidity(\"\");\r\n    }\r\n    if (!inputElement.validity.valid) {\r\n        showInputError(formElement, inputElement, inputElement.validationMessage, settings);\r\n    } else {\r\n        hideInputError(formElement, inputElement, settings);\r\n    }\r\n};\r\n\r\n//функция проверки полей формы на валидность и возврата результата проверки\r\nconst hasInvalidInput = (inputList) => {\r\n    return inputList.some((inputElement) => {\r\n        return !inputElement.validity.valid;\r\n    });\r\n};\r\n\r\n//функция стилизации кнопки (активна или нет)\r\nconst toogleButtonState = (inputList, buttonElement, settings) => {\r\n    if (hasInvalidInput(inputList)) {\r\n        buttonElement.disabled = true;\r\n        buttonElement.classList.add(settings.inactiveButtonClass);\r\n    } else {\r\n        buttonElement.disabled = false;\r\n        buttonElement.classList.remove(settings.inactiveButtonClass);\r\n    }\r\n};\r\n\r\n//добавим обработчики всем полям формы\r\nconst setEventListeners = (formElement, settings) => {\r\n    const inputList = Array.from(formElement.querySelectorAll(settings.inputSelector));\r\n    const buttonElement = formElement.querySelector(settings.submitButtonSelector); //выберем кнопку сабмита\r\n    inputList.forEach((inputElement) => {\r\n        inputElement.addEventListener('input', () => {\r\n            isValid(formElement, inputElement, settings);\r\n            toogleButtonState(inputList, buttonElement, settings); //вызовем функцию смены статуса кнопки сабмита\r\n        });\r\n    });\r\n};\r\n\r\n//добавим обработчики на все формы\r\nexport const enableValidation = (settings) => {\r\n    const formList = Array.from(document.querySelectorAll(settings.formSelector));\r\n    formList.forEach((formElement) => {\r\n        setEventListeners(formElement, settings);\r\n    });\r\n};\r\n\r\n\r\n\r\n//функция очистки ошибок валидации в формах\r\nexport function clearValidation(formElement, settings) {\r\n    // Находим все поля ввода в форме\r\n    const inputList = Array.from(formElement.querySelectorAll(settings.inputSelector));\r\n    const buttonElement = formElement.querySelector(settings.submitButtonSelector);\r\n    toogleButtonState(inputList, buttonElement, settings);\r\n    \r\n    // Очищаем ошибки для каждого поля ввода\r\n    inputList.forEach((inputElement) => {\r\n        hideInputError(formElement, inputElement, settings);\r\n    });\r\n};\r\n\r\n","import './pages/index.css';\r\nimport { createCard, cardLike } from './components/card.js';\r\nimport { openModal, closeModal } from './components/modal.js';\r\nimport { enableValidation, clearValidation } from \"./components/validation.js\";\r\nimport { deleteCardApi, formEditApi, newCardApi, getUserData, getAllCards, editAvatarApi } from \"./components/api.js\";\r\n\r\n// создадим контейнер для вывода карточек на страницу\r\nconst placesList = document.querySelector('.places__list');\r\n\r\n// Находим все модальные окна\r\nconst popupEdit = document.querySelector('.popup_type_edit');\r\nconst popupNew = document.querySelector('.popup_type_new-card');\r\nconst popupImg = document.querySelector('.popup_type_image');\r\n\r\n// находим фото и подпись к нему для вывода в попап \r\nconst modalImage = popupImg.querySelector('.popup__image');\r\nconst modalCaption = popupImg.querySelector('.popup__caption');\r\n\r\n// Находим элементы для вызова модальных окон\r\nconst buttonEdit = document.querySelector('.profile__edit-button');\r\nconst buttonAdd = document.querySelector('.profile__add-button');\r\n\r\n// //находим кнопку отправки данных модального окна создания новой карточки\r\n// const buttonCloseAdd = popupNew.querySelector('.popup__button');\r\n\r\n// Обработчик для вызова модального окна редактирования профиля\r\nbuttonEdit.addEventListener('click', () => {\r\n    openModal(popupEdit);\r\n    nameInput.value = profileTitle.textContent;\r\n    jobInput.value = profileDescription.textContent;\r\n    clearValidation(formEdit, validationSettings);\r\n});\r\n// Обработчик для вызова модального окна добавления карточки\r\nbuttonAdd.addEventListener('click', () => {\r\n    formAddNewCard.reset();\r\n    openModal(popupNew);\r\n    clearValidation(formAddNewCard, validationSettings);\r\n});\r\n\r\n// Находим все модальные окна\r\n// Для каждого модального окна вешаем обработчики закрытия на оверлей и крестик\r\nconst popups = document.querySelectorAll('.popup');\r\npopups.forEach((popup) => {\r\n    popup.addEventListener('click', function (event) {\r\n        if (event.target.classList.contains('popup__close') || event.target === popup) {\r\n        closeModal(popup);\r\n        }\r\n    });\r\n});\r\n\r\n//Функция вывода popup-картинки на страницу при клике\r\nfunction handleClickImg(link, name) {\r\n    modalImage.src = link;\r\n    modalImage.alt = name;\r\n    modalCaption.textContent = name;\r\n    openModal(popupImg);\r\n};\r\n\r\n\r\n\r\n// Находим попап подтверждения удаления\r\nconst popupConfirm = document.querySelector('.popup_type_confirm');\r\nconst formConfirm = document.forms[\"confirm\"];\r\nconst buttonCloseDelete = formConfirm.querySelector('.popup__button');\r\n\r\n// Переменные для хранения данных об удаляемой карточке\r\nlet idCardForDelete;\r\nlet cardForDelete;\r\n\r\n// Функция удаления карточки\r\nfunction handleDeleteCard(id, cardElement) {\r\n    idCardForDelete = id;\r\n    cardForDelete = cardElement;\r\n    openModal(popupConfirm);\r\n}\r\n\r\n// Обработчик подтверждения удаления\r\nfunction handleConfirmDelete(event) {\r\n    event.preventDefault();\r\n\r\n    const initialTextDelete = buttonCloseDelete.textContent;\r\n    // Меняем текст кнопки на \"Удаление...\"\r\n    buttonCloseDelete.textContent = 'Удаление...';\r\n\r\n    deleteCardApi(idCardForDelete)\r\n    .then(() => {\r\n        // Удаляем карточку из DOM\r\n        cardForDelete.remove();\r\n        closeModal(popupConfirm);\r\n    })\r\n    .catch(err => {\r\n        console.log(err);\r\n    })\r\n    .finally(() => {\r\n    // Возвращаем исходный текст кнопки\r\n    buttonCloseDelete.textContent = initialTextDelete;\r\n    })\r\n}\r\nbuttonCloseDelete.addEventListener('click', handleConfirmDelete);\r\n\r\n\r\n\r\n\r\n// скрипт редактирования данных профиля\r\n// Находим форму в DOM\r\nconst formEdit = document.querySelector('form[name=\"edit-profile\"]');\r\n// Находим поля формы в DOM\r\nconst nameInput = formEdit.querySelector('.popup__input_type_name');\r\nconst jobInput = formEdit.querySelector('.popup__input_type_description');\r\n// Получим значение полей jobInput и nameInput из свойства value\r\nconst profileTitle = document.querySelector('.profile__title');\r\nconst profileDescription = document.querySelector('.profile__description');\r\n\r\n// Обработчик «отправки» формы на редактирование профиля\r\nfunction handleFormEdit(event) {\r\n    event.preventDefault();\r\n\r\n    const submitButtonEdit = formEdit.querySelector('.popup__button');\r\n    const initialTextEdit = submitButtonEdit.textContent;\r\n    // Меняем текст кнопки на \"Сохранение...\"\r\n    submitButtonEdit.textContent = 'Сохранение...';\r\n\r\n    formEditApi (nameInput.value, jobInput.value)\r\n    .then(() => {\r\n        // Вставим новые значения с помощью textContent\r\n        profileTitle.textContent = nameInput.value;\r\n        profileDescription.textContent = jobInput.value;\r\n        //закроем окно принудительно\r\n        closeModal(popupEdit);\r\n    })\r\n    .catch((err) => {\r\n        console.log(err);\r\n    })\r\n    .finally(() => {\r\n    // Возвращаем исходный текст кнопки\r\n    submitButtonEdit.textContent = initialTextEdit;\r\n    })\r\n};\r\nformEdit.addEventListener( 'submit', handleFormEdit );\r\n\r\n\r\n\r\n\r\n// скрипт добавления новой карточки\r\n// Находим форму в DOM\r\nconst formAddNewCard = document.querySelector('form[name=\"new-place\"]');\r\n// Обработчик «отправки» формы новой карточки\r\nfunction handleNewCard(event) {\r\n    event.preventDefault();\r\n    // Получаем данные из формы\r\n    const cardData = {\r\n        name: formAddNewCard.querySelector('.popup__input_type_card-name').value,\r\n        link: formAddNewCard.querySelector('.popup__input_type_url').value\r\n    };\r\n    const submitButtonAddCard = formAddNewCard.querySelector('.popup__button');\r\n    const initialTextAddCard = submitButtonAddCard.textContent;\r\n    // Меняем текст кнопки на \"Сохранение...\"\r\n    submitButtonAddCard.textContent = 'Сохранение...';\r\n    //отправим карточку на сервер после добавления в DOM\r\n    newCardApi (cardData.name, cardData.link)\r\n    .then(newCard => {\r\n        // Создаем карточку\r\n        const cardNew = createCard(newCard, handleDeleteCard, handleClickImg, cardLike, userId);\r\n        // Добавляем карточку в начало контейнера\r\n        placesList.prepend(cardNew);\r\n        // Закрываем попап и очищаем форму\r\n        closeModal(popupNew);\r\n        formAddNewCard.reset();\r\n    })\r\n    .catch((err) => {\r\n        console.log(err);\r\n    })\r\n    .finally(() => {\r\n    // Возвращаем исходный текст кнопки\r\n    submitButtonAddCard.textContent = initialTextAddCard;\r\n    })\r\n};\r\nformAddNewCard.addEventListener( 'submit', handleNewCard );\r\n\r\n\r\n\r\n\r\n//скрипт общей проверки на валидность\r\nconst validationSettings = {\r\n    formSelector: '.popup__form',\r\n    inputSelector: '.popup__input',\r\n    submitButtonSelector: '.popup__button',\r\n    inactiveButtonClass: 'popup__button_disabled',\r\n    inputErrorClass: 'popup__input_type_error',\r\n    errorClass: 'popup__input-error_active'\r\n};\r\n//вызовем функцию\r\nenableValidation(validationSettings);\r\n\r\n\r\n\r\n\r\n//скрипт загрузки данных профиля и карточек с сервера\r\nlet userId = null;\r\n\r\nPromise.all([getUserData(), getAllCards()])\r\n    .then(([userData, cards]) => {\r\n        userId = userData._id;\r\n        profileTitle.textContent = userData.name;\r\n        profileDescription.textContent = userData.about;\r\n        profileAvatar.src = userData.avatar;\r\n        cards.forEach((cardData) => {\r\n            const cardElement = createCard(\r\n                cardData, \r\n                handleDeleteCard, \r\n                handleClickImg, \r\n                cardLike,\r\n                userId\r\n            );\r\n            placesList.append(cardElement);\r\n        })\r\n    })\r\n    .catch((err) => {\r\n        console.log(err);\r\n    });\r\n\r\n\r\n\r\n\r\n\r\n\r\n//смена аватарки при клике на нее\r\nconst avatarEdit = document.querySelector('.profile__image-edit');\r\nconst popupAvatar = document.querySelector('.popup__avatar-edit');\r\nconst formEditAvatar = popupAvatar.querySelector('.popup__form');\r\nconst avatarLinkInput = formEditAvatar.querySelector('.popup__input_avatar_url');\r\nconst profileAvatar = document.querySelector('.profile__image');\r\n\r\n\r\nfunction handleEditAvatar(event) {\r\n    event.preventDefault();\r\n\r\n    const submitButtonAva = formEditAvatar.querySelector('.popup__button');\r\n    const initialTextAva = submitButtonAva.textContent;\r\n    // Меняем текст кнопки на \"Сохранение...\"\r\n    submitButtonAva.textContent = 'Сохранение...';\r\n\r\n    //отправим на сервер\r\n    editAvatarApi (avatarLinkInput.value)\r\n    .then(data => {\r\n        // Обновляем аватар на странице\r\n        profileAvatar.src = data.avatar;\r\n        closeModal(popupAvatar);\r\n    })\r\n    .catch((err) => {\r\n        console.log(err);\r\n    })\r\n    .finally(() => {\r\n    // Возвращаем исходный текст кнопки\r\n    submitButtonAva.textContent = initialTextAva;\r\n    })\r\n};\r\nformEditAvatar.addEventListener( 'submit', handleEditAvatar );\r\n\r\n\r\n\r\n// слушатель для вызова модального окна изменения аватарки\r\navatarEdit.addEventListener('click', () => {\r\n    openModal(popupAvatar);\r\n    avatarLinkInput.value = profileAvatar.textContent;\r\n    clearValidation(formEditAvatar, validationSettings);\r\n});\r\n"],"names":["config","baseUrl","headers","authorization","checkResponse","res","ok","json","Promise","reject","concat","status","createCard","cardData","handleDeleteCard","handleClickImg","cardLike","userId","cardElement","document","querySelector","content","cloneNode","cardImage","cardTitle","cardDeleteButton","cardLikeButton","cardLikeNumber","src","link","alt","name","textContent","likes","length","owner","_id","remove","addEventListener","some","like","classList","add","cardId","contains","fetch","method","then","cardLikeDeleteApi","data","catch","err","console","log","cardLikePutApi","openModal","popup","handleCloseEsc","event","key","closeModal","removeEventListener","hideInputError","formElement","inputElement","settings","errorElement","id","inputErrorClass","errorClass","toogleButtonState","inputList","buttonElement","validity","valid","hasInvalidInput","disabled","inactiveButtonClass","clearValidation","Array","from","querySelectorAll","inputSelector","submitButtonSelector","forEach","placesList","popupEdit","popupNew","popupImg","modalImage","modalCaption","buttonEdit","buttonAdd","nameInput","value","profileTitle","jobInput","profileDescription","formEdit","validationSettings","formAddNewCard","reset","target","idCardForDelete","cardForDelete","popupConfirm","buttonCloseDelete","forms","preventDefault","initialTextDelete","deleteCardApi","finally","submitButtonEdit","initialTextEdit","body","JSON","stringify","about","formEditApi","cardName","cardLink","submitButtonAddCard","initialTextAddCard","newCard","cardNew","prepend","formSelector","patternMismatch","setCustomValidity","dataset","errorMessage","showInputError","validationMessage","isValid","setEventListeners","all","_ref","_ref2","userData","cards","profileAvatar","avatar","append","avatarEdit","popupAvatar","formEditAvatar","avatarLinkInput","avatarLink","submitButtonAva","initialTextAva"],"sourceRoot":""}